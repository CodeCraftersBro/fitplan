import 'package:fitplan/repositories/workout/models/exercise.dart';
import 'package:fitplan/repositories/workout/models/exercise_type.dart';
import 'package:fitplan/repositories/workout/models/workout.dart';
import 'package:fitplan/repositories/workout/workout_repository_interface.dart';

class WorkoutRepository implements WorkoutRepositoryInterface {
  @override
  Future<List<Workout>> getExerciseListByDate(DateTime date) async {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
    bool isSameDay(DateTime a, DateTime b) {
      return a.year == b.year && a.month == b.month && a.day == b.day;
    }

    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–∫–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    final List<Workout> mockWorkouts = [
      Workout(
        id: '1',
        sort: 1,
        date: DateTime(2024, 5, 20),
        isSet: true,
        exerciseIndicator: LineDirection.down,
        exercise: const Exercise(
          id: '8',
          name: 'Bicep curls',
          typeId: ExerciseType(id: 'strength', name: 'Strength', icon: 'üí™'),
        ),
      ),
      Workout(
        id: '2',
        sort: 1,
        date: DateTime(2024, 5, 20),
        isSet: true,
        exerciseIndicator: LineDirection.middle,
        exercise: const Exercise(
          id: '4',
          name: 'Bicep curls2',
          typeId: ExerciseType(id: 'strength', name: 'Strength', icon: 'üí™'),
        ),
      ),
      Workout(
        id: '1',
        sort: 1,
        date: DateTime(2024, 5, 20),
        isSet: true,
        exerciseIndicator: LineDirection.middle,
        exercise: const Exercise(
          id: '8',
          name: 'Bicep curls',
          typeId: ExerciseType(id: 'strength', name: 'Strength', icon: 'üí™'),
        ),
      ),
      Workout(
        id: '8',
        sort: 2,
        date: DateTime(2024, 5, 20),
        isSet: true,
        exerciseIndicator: LineDirection.middle,
        exercise: const Exercise(
          id: '5',
          name: 'Lunges',
          typeId: ExerciseType(id: 'run', name: 'Runner', icon: 'üèÉ'),
        ),
      ),
      Workout(
        id: '3',
        sort: 1,
        date: DateTime(2024, 5, 20),
        isSet: true,
        exerciseIndicator: LineDirection.up,
        exercise: const Exercise(
          id: '2',
          name: 'Bicep curls3',
          typeId: ExerciseType(id: 'strength', name: 'Strength', icon: 'üí™'),
        ),
      ),
      Workout(
        id: '5',
        sort: 1,
        date: DateTime(2024, 5, 20),
        isSet: false,
        exercise: const Exercise(
          id: '7',
          name: 'Overhead press',
          typeId: ExerciseType(id: 'strength', name: 'Strength', icon: 'üí™'),
        ),
      ),
      Workout(
        id: '9',
        sort: 1,
        date: DateTime(2024, 5, 20),
        isSet: false,
        exercise: const Exercise(
          id: '7',
          name: 'Overhead press',
          typeId: ExerciseType(id: 'strength', name: 'Strength', icon: 'üèÉ'),
        ),
      ),
      Workout(
        id: '9',
        sort: 1,
        date: DateTime(2024, 5, 20),
        isSet: false,
        exercise: const Exercise(
          id: '7',
          name: 'Overhead press',
          typeId: ExerciseType(id: 'strength', name: 'Strength', icon: 'üèÉ'),
        ),
      ),
      Workout(
        id: '1',
        sort: 1,
        date: DateTime(2024, 5, 20),
        isSet: true,
        exerciseIndicator: LineDirection.down,
        exercise: const Exercise(
          id: '8',
          name: 'Bicep curls',
          typeId: ExerciseType(id: 'strength', name: 'Strength', icon: 'üí™'),
        ),
      ),
      Workout(
        id: '2',
        sort: 1,
        date: DateTime(2024, 5, 20),
        isSet: true,
        exerciseIndicator: LineDirection.middle,
        exercise: const Exercise(
          id: '4',
          name: 'Bicep curls2',
          typeId: ExerciseType(id: 'strength', name: 'Strength', icon: 'üí™'),
        ),
      ),
      Workout(
        id: '3',
        sort: 1,
        date: DateTime(2024, 5, 20),
        isSet: true,
        exerciseIndicator: LineDirection.up,
        exercise: const Exercise(
          id: '2',
          name: 'Bicep curls3',
          typeId: ExerciseType(id: 'strength', name: 'Strength', icon: 'üí™'),
        ),
      ),
      Workout(
        id: '8',
        sort: 2,
        date: DateTime(2024, 5, 21),
        isSet: false,
        exercise: const Exercise(
          id: '5',
          name: 'Lunges',
          typeId: ExerciseType(id: 'run', name: 'Runner', icon: 'üèÉ'),
        ),
      ),
      // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –º–æ–∫–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ];

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
    final List<Workout> workoutsForDate = mockWorkouts.where((workout) {
      return isSameDay(workout.date, date);
    }).toList();

    return workoutsForDate;
  }
}
